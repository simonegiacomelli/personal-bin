#!/usr/bin/env python3
import os
import sys
from enum import Enum
from glob import glob
from os.path import expanduser
from pathlib import Path
from urllib.parse import urlparse, urlsplit
from strings import removeprefix, removesuffix


class Status(Enum):
    ACTIVE = 'A'
    COMMENTED = 'C'
    MISSING = 'M'


_marker = '-Dsun.java2d.uiScale='
_option = '-Dsun.java2d.uiScale=2'


def status(content: str) -> Status:
    if _marker not in content:
        return Status.MISSING

    lines = content.split('\n')
    for line in lines:
        if _marker not in line:
            continue
        if line.strip().startswith('#'):
            return Status.COMMENTED
        else:
            return Status.ACTIVE

    assert 'whhaaat' == 'success'


def activate(content: str) -> str:
    return update(content, Status.ACTIVE)


def comment(content: str) -> str:
    return update(content, Status.COMMENTED)


def remove(content: str) -> str:
    return update(content, Status.MISSING)


def update(content: str, new: Status) -> str:
    old = status(content)
    if old == new:
        return content

    lines = content.split('\n')
    index = -1
    for i, line in enumerate(lines):
        if _marker in line:
            index = i
            break

    if index == -1:
        index = len(lines)
        lines.append('')

    if new == Status.MISSING:
        del lines[index]
    elif new == Status.ACTIVE:
        lines[index] = _option
    elif new == Status.COMMENTED:
        lines[index] = '#' + _option
    else:
        assert 'unexpected' == 'state'

    return '\n'.join(lines)


import unittest


class TestJetbrainsFix(unittest.TestCase):

    def test_missing(self):
        self.assertEqual(Status.MISSING, status(''))

    def test_active(self):
        self.assertEqual(Status.ACTIVE, status('\n\n-Dsun.java2d.uiScale=\n\n'))
        self.assertEqual(Status.ACTIVE, status('\n\n-Dsun.java2d.uiScale=2\n\n'))

    def test_commented(self):
        self.assertEqual(Status.COMMENTED, status('\n\n#-Dsun.java2d.uiScale=\n\n'))
        self.assertEqual(Status.COMMENTED, status('\n\n# -Dsun.java2d.uiScale=\n\n'))

    def test_activate(self):
        actual = activate('')
        self.assertEqual(Status.ACTIVE, status(actual))

    def test_double_activate(self):
        actual = activate('')
        actual = activate(actual)
        self.assertEqual(Status.ACTIVE, status(actual))
        _assert_no_duplicates(actual)

    def test_commented_activate(self):
        actual = activate('\nfoo=bar\n#' + _option + '\none=1')
        self.assertEqual('\nfoo=bar\n' + _option + '\none=1', actual)
        _assert_no_duplicates(actual)

    def test_comment(self):
        actual = comment('\nfoo=bar\n' + _option + '\none=1')
        self.assertEqual('\nfoo=bar\n#' + _option + '\none=1', actual)
        _assert_no_duplicates(actual)

    def test_remove(self):
        actual = remove('\nfoo=bar\n' + _option + '\none=1')
        self.assertEqual('\nfoo=bar\none=1', actual)
        _assert_no_duplicates(actual)

    def test_activate_no_previous(self):
        actual = activate('\nfoo=bar\none=1')
        self.assertEqual('\nfoo=bar\none=1\n' + _option, actual)
        _assert_no_duplicates(actual)

    def test_duplicates(self):
        try:
            _assert_no_duplicates(_option + '\n' + _option)
        except:
            return 'ok'
        self.fail('the helper function does not work correctly')


def _assert_no_duplicates(actual):
    parts = actual.split(_marker)
    unittest.TestCase().assertLessEqual(len(parts), 2)


def main():
    arg = sys.argv[1] if len(sys.argv) > 1 else ''
    if arg == 'test':
        suite = unittest.defaultTestLoader.loadTestsFromTestCase(TestJetbrainsFix)
        unittest.TextTestRunner().run(suite)
        return

    if arg == 'add':
        fun = activate
    elif arg == 'com':
        fun = comment
    elif arg == 'rem':
        fun = remove
    elif arg == 'show':
        fun = None
    else:
        print('please specify an argument: show, add, rem, com or test ')
        return

    folder = '~/.local/share/JetBrains/Toolbox/apps/'
    path = Path(expanduser(folder))
    print(f'Working on folder {path}\n')

    for g in path.rglob('*.vmoptions'):
        if not g.parent.name.startswith('ch-'):
            continue
        text = g.read_text()
        if fun is not None:
            text = fun(text)
            g.write_text(text)

        print(f'{status(text)}  {g}')

    print('\ndone.')


if __name__ == '__main__':
    main()
