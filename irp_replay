#!/usr/bin/env -S uv run -s
# /// script
# requires-python = "==3.11.10"
# dependencies = ["pynput"]
# ///
import json
import subprocess
import sys
from time import sleep

from pynput import keyboard, mouse
from pynput.keyboard import Key

from beeplib import beep
from dotool_lib import DotoolKeyboard
from dotool_mapping import pynput_to_dotool_key
from irplib import get_video_path, extension, Line, human_delay, text_parse, mark_last, Human

dotool = DotoolKeyboard()
mouse_contr = mouse.Controller()


def process_keyboard(line: Line):
    # args[0] is delay
    command = line.command
    key_str = line.args[1]
    if command == 'kc':
        dotool.type_char(key_str)
    else:
        func = 'keydown' if command == 'kp' else 'keyup'
        key = pynput_to_dotool_key(key_str)
        dotool.exit_if_unrecognized(key)
        dotool_command = f'{func.ljust(7)} {key.ljust(20)}'
        print(dotool_command, end='')
        dotool.send(dotool_command)


def process_mouse(line: Line):
    # args[0] is delay
    command = line.command
    if command == 'mm':
        x, y = map(int, line.args[1:3])
        mouse_contr.position = (x, y)
    elif command == 'mc':
        x, y, button, pressed = line.args[1:5]
        x, y = map(int, (x, y))
        button = getattr(mouse.Button, button.removeprefix('Button.'))
        func = mouse_contr.press if pressed == 'True' else mouse_contr.release
        func(button)
    elif command == 'ms':  # mouse scroll
        x, y, dx, dy = map(int, line.args[1:5])
        mouse_contr.scroll(dx, dy)
    else:
        raise Exception(f'process_mouse skip: {line}')


stop_replay = False


def main():
    global stop_replay

    def on_press(key):
        global stop_replay
        if key == Key.esc or key == Key.f11:
            print('Stop pressed, exiting...')
            stop_replay = True

    keyboard.Listener(on_press=on_press).start()

    video_path = get_video_path() / f'last.{extension}'

    with open(video_path) as f:
        for line_str in f:
            line_str = line_str.strip('\n')
            if line_str.lstrip().startswith('#'):
                continue
            multi = line_str.split('\t')
            for cmd in multi:
                line = Line(cmd)
                process_line(line)
                if stop_replay:
                    break
        print()
        print('replay terminated')
        beep()


human = Human(dotool, lambda: stop_replay)


def process_line(line: Line):
    global stop_replay
    if line.ignore:
        return
    command = line.command
    if command == 'dotool':
        dotool.send(line.line[7:])
        return
    if command == 'sleep':
        sleep(float(line.args[0]))
        return
    if command == 'human':
        human.process_line(line)
        return

    delay_secs = float(line.args[0])
    print(f' delay {delay_secs}')
    sleep(delay_secs)

    if stop_replay:
        return

    if command in {'kp', 'kr', 'kc'}:
        process_keyboard(line)
    elif command in {'mm', 'mc', 'ms'}:
        print(f'{line_str}', end='')
        process_mouse(line)
    else:
        print(f'Unknown command: {command}')
        stop_replay = True


if __name__ == '__main__':
    main()
