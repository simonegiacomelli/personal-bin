#!/usr/bin/env python3
import os
import sys
from typing import List


def pids_for(port: int) -> List[str]:
    cmd = f'lsof -i tcp:{port}'
    content = os.popen(cmd).read()

    if content == '':
        print(f'No process is using {port}')
        return []

    lines = content.split('\n')

    header = lines[0]
    fields = split_fields(header)

    if fields[1] != "PID":
        raise f'expected header PID in `{header}`'

    procs = list(filter(lambda l: l != '', lines[1:]))
    pids = list(map(lambda line: split_fields(line)[1], procs))
    return pids


def split_fields(s: str) -> List[str]:
    split = s.split(' ')
    fields = list(filter(lambda l: l != '', split))
    return fields


import unittest


class TestThis(unittest.TestCase):

    def test_1(self):
        pass


def main():
    arg = sys.argv[1] if len(sys.argv) > 1 else ''
    if arg == 'test':
        suite = unittest.defaultTestLoader.loadTestsFromTestCase(TestThis)
        unittest.TextTestRunner().run(suite)
        return
    if arg == '':
        print('Please, specify tcp port whose process will be killed')
        return
    pids = pids_for(int(arg))
    for pid in pids:
        print(f'killing pid {pid} ', end='')
        print(os.popen(f'kill {pid}').read())


if __name__ == '__main__':
    main()
