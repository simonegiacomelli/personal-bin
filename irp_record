#!/usr/bin/env -S uv run -s
# /// script
# requires-python = "==3.11.10"
# dependencies = ["pynput"]
# ///

from __future__ import annotations

import shutil
import subprocess
from datetime import datetime
import time
from functools import partial
from pathlib import Path
from threading import Thread, Event

from pynput import mouse
from pynput import keyboard
from pynput.keyboard import KeyCode, Key

from beeplib import beep
from dotool_mapping import pynput_is_char
from irplib import extension


# print('Starting recording in ', end='')
# for text in "3… 2… 1… \n":
#     print(text, end='', flush=True)
#     time.sleep(0.5)


def is_stop_key(key: Key | KeyCode):
    media4 = '<269025089>'
    return key == Key.f11 or str(key) == media4


print(f'Starting irp_record.py, press F11 or Media4 to stop it.')

video_dir = subprocess.check_output('xdg-user-dir VIDEOS'.split(' ')).decode().strip()
dt = datetime.now().strftime('%Y-%m-%d--%H-%M-%S')
video_path = Path(video_dir)
file = video_path / f'{dt}.{extension}'
last = video_path / f'last.{extension}'

file.touch(exist_ok=False)

event_time = time.monotonic
last_event = event_time()


def append(line: str):
    with open(file, 'a') as f:
        f.write(line + '\n')


stop_event = Event()


def handler(prefix: str, *args):
    if stop_event.is_set():
        return
    global last_event
    now = event_time()
    delay = round(now - last_event, 4)
    last_event = now
    join = ','.join(map(str, args))
    append(f'{prefix},{join},{delay}')


def key_handle(prefix: str, key: Key | KeyCode):
    if isinstance(key, Key):
        key = key.name
    handler(prefix, key)


def key_press(key: Key | KeyCode):
    if stop(key):
        return
    key_handle('kp', key)


def key_release(key: Key | KeyCode):
    if pynput_is_char(key):
        return  # ignore chars released
    key_handle('kr', key)


def stop(key: Key | KeyCode) -> bool:
    if not is_stop_key(key):
        return False

    print(f'Stop key pressed, exiting...')
    keyboard_listener.stop()
    mouse_listener.stop()
    stop_event.set()
    return True


def mw(prefix: str):
    return partial(handler, prefix)


keyboard_listener = keyboard.Listener(on_press=key_press, on_release=key_release)
mouse_listener = mouse.Listener(on_move=mw('mm'), on_click=mw('mc'), on_scroll=mw('ms'))


def start():
    header_help = '#help kp: key press; kr: key release; mm: mouse move; mc: mouse click; ms: mouse scroll'
    append(f'type,*args,delay_secs,{header_help}')
    keyboard_listener.start()
    mouse_listener.start()
    beep()
    keyboard_listener.join()
    mouse_listener.join()


Thread(target=start, daemon=True).start()
stop_event.wait()
shutil.copyfile(file, last)
print('Recording stopped.')
beep()
