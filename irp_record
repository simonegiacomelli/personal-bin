#!/usr/bin/env -S uv run -s
# /// script
# requires-python = "==3.11.10"
# dependencies = ["pynput"]
# ///

from __future__ import annotations

import shlex
import shutil
import subprocess
import sys
import time
from datetime import datetime
from functools import partial
from pathlib import Path
from threading import Thread, Event

from pynput import keyboard
from pynput import mouse
from pynput.keyboard import KeyCode, Key

from beeplib import beep
from dotool_mapping import pynput_is_char
from irplib import extension, SmartSeparator


def is_stop_key(key: Key | KeyCode):
    media4 = '<269025089>'
    return key == Key.f11 or str(key) == media4


def dt_str():
    return datetime.now().strftime('%Y-%m-%d--%H-%M-%S')


print(f'Starting irp_record.py, press F11 or Media4 to stop it.')

video_dir = subprocess.check_output('xdg-user-dir VIDEOS'.split(' ')).decode().strip()
dt = dt_str()
video_path = Path(video_dir)
irp_record_path = video_path / 'irp-record'
irp_record_path.mkdir(exist_ok=True)

rec_file = irp_record_path / f'{dt}.{extension}'
last = video_path / f'last.{extension}'

rec_file.touch(exist_ok=False)

event_time = time.monotonic
last_event = event_time()


class File:
    def __init__(self, path: Path):
        self.path = path
        self.smart_separator = SmartSeparator()

    def append_raw(self, text: str):
        with open(self.path, 'a') as f:
            f.write(text)
        print(text, end='', flush=True)

    def append_command(self, command: str, delay: str, join: str):
        pre, pos = self.smart_separator.process(command)
        cmd_str = f'{pre}{command} {delay} {join}{pos}'
        self.append_raw(cmd_str)


file = File(rec_file)


def backup_file(path: Path):
    if not path.exists():
        return
    ctime = path.stat().st_ctime
    ctime_str = datetime.fromtimestamp(ctime).strftime('%Y-%m-%d--%H-%M-%S')
    backup = irp_record_path / f'{path.stem}--{ctime_str}{path.suffix}'
    shutil.copyfile(last, backup)


stop_event = Event()


def append_command(command: str, *args):
    if stop_event.is_set():
        return
    global last_event
    now = event_time()
    delay = str(round(now - last_event, 4)).ljust(8)
    last_event = now
    join = shlex.join(map(str, args))
    file.append_command(command, delay, join)


def key_handle(prefix: str, key: Key | KeyCode):
    if isinstance(key, Key):
        key = key.name
    if isinstance(key, KeyCode):
        if key.vk == 65056:
            key = 'tab'
    append_command(prefix, key)


def key_press(key: Key | KeyCode):
    if stop(key):
        return
    if pynput_is_char(key):
        append_command('kc', key.char)
    else:
        key_handle('kp', key)


def key_release(key: Key | KeyCode):
    if pynput_is_char(key):
        return  # ignore chars released
    key_handle('kr', key)


def stop(key: Key | KeyCode) -> bool:
    if not is_stop_key(key):
        return False

    print(f'Stop key pressed, exiting...')
    keyboard_listener.stop()
    mouse_listener.stop()
    stop_event.set()
    return True


def mw(prefix: str):
    return partial(append_command, prefix)


keyboard_listener = keyboard.Listener(on_press=key_press, on_release=key_release)
mouse_listener = mouse.Listener(on_move=mw('mm'), on_click=mw('mc'), on_scroll=mw('ms'))


def start():
    file.append_raw(f'; irp_record {dt}\n')
    keyboard_listener.start()
    mouse_listener.start()
    beep()
    keyboard_listener.join()
    mouse_listener.join()


def main():
    if len(sys.argv) > 1 and sys.argv[1] == 'append':
        if last.exists():
            shutil.copyfile(last, file.path)
            file.append_raw('\n')

    Thread(target=start, daemon=True).start()
    stop_event.wait()
    backup_file(last)
    shutil.copyfile(file.path, last)

    print('Recording stopped.')
    beep()


if __name__ == '__main__':
    main()
